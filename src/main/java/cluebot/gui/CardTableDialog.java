package cluebot.gui;

import cluebot.ClueBot;
import cluebot.game.Card;
import cluebot.game.Player;
import cluebot.util.TableHelper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public final class CardTableDialog extends JDialog {

    private JPanel contentPane;
    private JButton buttonOK;
    private JTable cardTable;

    private final ClueBot bot;

    CardTableDialog(ClueBot bot) {
        this.bot = bot;

        $$$setupUI$$$();
        setContentPane(contentPane);
        setModal(false);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(e -> dispose());

        update();
        bot.addSuggestionUpdateListener(s -> update());
    }

    private void createUIComponents() {
        List<Object> columns = new ArrayList<>();
        columns.add("Name");
        columns.addAll(Arrays.asList(Card.values()));
        columns.remove(Card.UNKNOWN);
        cardTable = new JTable(new DefaultTableModel(columns.toArray(new Object[0]), 0));
    }

    private void update() {
        DefaultTableModel cardTableModel = (DefaultTableModel) (cardTable.getModel());
        TableHelper.removeAllRows(cardTableModel);
        TableHelper.addAllRows(cardTableModel, bot.getContext().getAllPlayers(), this::getPlayerInfo);
    }

    private Object[] getPlayerInfo(Player player) {
        List<Object> data = new ArrayList<>();
        data.add(player.getName());
        for (Card card : Card.values()) {
            if (card.getType() == Card.Type.UNKNOWN)
                continue;
            data.add(getCardStatus(player, card));
        }
        return data.toArray(new Object[0]);
    }

    private String getCardStatus(Player player, Card card) {
        if (player.hasCard(card)) {
            return "X";
        }

        int possibility;
        if ((possibility = player.getPossibility(card)) > 0) {
            return Integer.toString(possibility);
        }

        if (!player.couldHaveCard(bot.getContext(), card) && bot.getContext().findPlayerWithCard(card) == null) {
            return "N";
        }

        return "";
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(cardTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
